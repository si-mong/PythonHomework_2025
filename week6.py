# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Te8mpQEe85yP5JO5djmEucQIMA7lGwG9
"""

##################

  #프로그램명: 학생 성적관리 프로그램

  #작성자: 소프트웨어학부 2023078086 최은재

  #작성일: 2025-04-11

  #프로그램 설명:
"""
    5명의 학생의 세개의 교과목 (영어, C-언어, 파이썬)에 대하여

     키보드로부터 학번, 이름, 영어점수, C-언어 점수, 파이썬 점수를 입력받아 총점, 평균, 학점, 등수를  계산하는 프로그램 작성

       - 입력 함수, 총점/평균 계산 함수,  학점계산 함수, 등수계산 함수, 출력 함수

       - 삽입 함수, 삭제 함수, 탐색함수(학번, 이름), 정렬(총점)함수, 80점이상 학생 수 카운트 함수
"""
  ###################

# 학생 한 명의 정보를 저장하고, 계산하는 클래스
class Student:
    def __init__(self, stu_num, name, eng, c_lang, python):
        # 기본 정보 입력
        self.stu_num = stu_num
        self.name = name
        self.eng = eng
        self.c_lang = c_lang
        self.python = python

        # 성적 관련 초기값 설정
        self.total = 0
        self.average = 0.0
        self.grade = ''
        self.rank = 1

    # 총점 및 평균 계산
    def calculate_score(self):
        self.total = self.eng + self.c_lang + self.python
        self.average = round(self.total / 3, 2)

    # 평균을 기반으로 학점 부여
    def assign_grade(self):
        avg = self.average
        if avg >= 95:
            self.grade = 'A+'
        elif avg >= 90:
            self.grade = 'A'
        elif avg >= 85:
            self.grade = 'B+'
        elif avg >= 80:
            self.grade = 'B'
        elif avg >= 75:
            self.grade = 'C+'
        elif avg >= 70:
            self.grade = 'C'
        elif avg >= 65:
            self.grade = 'D+'
        elif avg >= 60:
            self.grade = 'D'
        else:
            self.grade = 'F'

    # 학생 정보를 한 줄로 출력
    def print_info(self):
        print(f"{self.stu_num}\t{self.name}\t{self.eng}\t{self.c_lang}\t{self.python}\t"
              f"{self.total}\t{self.average}\t{self.grade}\t{self.rank}")


# 여러 명의 학생을 관리하는 클래스
class GradeManager:
    def __init__(self):
        self.students = []

    # 학생 정보를 입력받아 리스트에 추가
    def input(self, num=3):
        for _ in range(num):
            self.add_student()
            print("\n")

    # 학생 추가 (삽입 기능)
    def add_student(self):
        # 사용자로부터 정보 입력
        stu_num = int(input("학번: "))
        name = input("이름: ")
        eng = int(input("영어 점수: "))
        c_lang = int(input("C-언어 점수: "))
        python = int(input("파이썬 점수: "))

        # 학생 객체 생성 및 성적 계산
        student = Student(stu_num, name, eng, c_lang, python)
        student.calculate_score()
        student.assign_grade()

        # 학생 리스트에 추가
        self.students.append(student)

    # 학번으로 학생 삭제
    def delete_student(self, stu_num):
        for i, student in enumerate(self.students):
            # 입력받은 학번과 일치하면 삭제
            if student.stu_num == stu_num:
                del self.students[i]
                print(f"{stu_num} 학번 학생 삭제 완료.")
                return
        #반복문 다 돌고 탈출했다는 말은 일치하는 학생 못 찾았다는 뜻
        #탐색실패로 삭제 못 함
        print("삭제할 학생을 찾을 수 없습니다.")

    # 학번으로 학생 탐색
    def search_by_id(self, stu_num):
        for student in self.students:
            if student.stu_num == stu_num:
                student.print_info()
                return
        print("해당 학번의 학생을 찾을 수 없습니다.")

    # 모든 학생의 점수 재계산 및 학점 부여
    def calculate_all(self):
        for student in self.students:
            student.calculate_score()
            student.assign_grade()

    # 평균을 기준으로 등수 계산
    def assign_ranks(self):
        for i in range(len(self.students)):
            self.students[i].rank = 1  # 초기화

            #본인보다 평균 점수가 높은 학색 수만큼 등수 up
            for j in range(len(self.students)):
                if self.students[i].average < self.students[j].average:
                    self.students[i].rank += 1

    # 총점을 기준으로 학생 정렬-내림차순
    def sort_student(self):
        def total_score_key(student):
            return student.total
        self.students.sort(key=total_score_key, reverse=True)

    # 평균 점수 80점 이상인 학생 수 카운트
    def count_over_80(self):
        return sum(1 for student in self.students if student.average >= 80)

    # 전체 학생 정보 출력
    def print_all(self):
        print("\n\t\t\t성적 관리 프로그램\n")
        print("============================================================================")
        print("학번\t\t이름\t영어\tC-언어\t파이썬\t총점\t평균\t학점\t등수")
        print("============================================================================")
        for student in self.students:
            student.print_info()
        print("============================================================================")
        print(f"* 평균 점수 80점 이상인 학생 수: {self.count_over_80()}명\n")


# 메뉴 함수
def menu():
    gm = GradeManager()
    gm.input()
    gm.calculate_all()
    gm.assign_ranks()
    gm.print_all()

    # 메뉴 반복
    while True:
        print("----------------------------------------------------------")
        print("메뉴:  1.삽입  2.삭제  3.학번탐색  4.총점정렬  5.출력  0.종료")
        choice = input("선택: ")
        print("----------------------------------------------------------")

        # 각 메뉴에 맞는 함수들을 호출
        if choice == '1':
            gm.add_student()
            gm.assign_ranks()
            print("\n")

        elif choice == '2':
            sid = int(input("삭제할 학생의 학번 입력: "))
            gm.delete_student(sid)
            gm.assign_ranks()
            print("\n")

        elif choice == '3':
            sid = int(input("검색할 학번 입력: "))
            gm.search_by_id(sid)
            print("\n")

        elif choice == '4':
            gm.sort_student()
            gm.assign_ranks()
            print("총점 기준으로 정렬 완료.\n")

        elif choice == '5':
            gm.print_all()
            print("\n")

        elif choice == '0':
            print("프로그램 종료.")
            break

        else:
            print("잘못된 선택입니다.")


# 프로그램 시작
menu()